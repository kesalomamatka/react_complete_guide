{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","otherState","switchNameHandler","newName","_this","setState","nameChangedHandler","event","target","_this2","this","style","backgroundColor","font","border","padding","cursor","Person_Person","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAgBeA,eAbA,SAACC,GAIZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,MAA6BN,EAAMO,KAAnC,WAAiDP,EAAMQ,IAAvD,cACAP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,SAAUX,EAAMY,QAASC,MAAOb,EAAMO,UC8DtDO,6MApEXC,MAAQ,CACJC,QAAS,CACL,CAAET,KAAM,MAAOC,IAAK,IACpB,CAAED,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAM,YAAaC,IAAK,KAE9BS,WAAY,sBAGhBC,kBAAoB,SAACC,GAGjBC,EAAKC,SAAU,CACXL,QAAS,CACL,CAAET,KAAMY,EAASX,IAAK,IACtB,CAAED,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAM,YAAaC,IAAK,UAKtCc,mBAAqB,SAACC,GAClBH,EAAKC,SAAU,CACXL,QAAS,CACL,CAAET,KAAM,MAAOC,IAAK,IACpB,CAAED,KAAMgB,EAAMC,OAAOX,MAAOL,IAAK,IACjC,CAAED,KAAM,YAAaC,IAAK,gFAQ5B,IAAAiB,EAAAC,KAUN,OACIzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACIwB,MAbE,CACVC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,WASA3B,QAAS,kBAAMoB,EAAKP,kBAAkB,kBAF1C,eAGAjB,EAAAC,EAAAC,cAAC8B,EAAD,CACI1B,KAAMmB,KAAKX,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKkB,KAAKX,MAAMC,QAAQ,GAAGR,MAC/BP,EAAAC,EAAAC,cAAC8B,EAAD,CACI1B,KAAMmB,KAAKX,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKkB,KAAKX,MAAMC,QAAQ,GAAGR,IAC3BF,MAAOoB,KAAKR,kBAAkBgB,KAAKR,KAAM,QACzCd,QAASc,KAAKJ,oBAJlB,sBAKArB,EAAAC,EAAAC,cAAC8B,EAAD,CACI1B,KAAMmB,KAAKX,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKkB,KAAKX,MAAMC,QAAQ,GAAGR,cA9D7B2B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5344dcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\n//HHE\r\nconst person = (props) =>{\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>Im {props.name} and im {props.age} years old</p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name}/>\r\n        </div>\r\n    )\r\n};\r\n//..\r\nexport default person;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React from 'react'\r\nimport './Person.css'\r\n\r\nconst person = (props) =>{\r\n\r\n    return (\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>im {props.name} and im {props.age}</p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.change<} value={props.name}/>\r\n        </div>\r\n    );\r\n    //return <p>im a person and im {Math.floor(Math.random()*30)} </p>\r\n};\r\n\r\nexport default person;*/","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Person from './Person/Person';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        persons: [\r\n            { name: 'Max', age: 28 },\r\n            { name: 'Manu', age: 29 },\r\n            { name: 'Stephanie', age: 26 }\r\n        ],\r\n        otherState: 'some other value'\r\n    }\r\n\r\n    switchNameHandler = (newName) => {\r\n        // console.log('Was clicked!');\r\n        // DON'T DO THIS: this.state.persons[0].name = 'Maximilian';\r\n        this.setState( {\r\n            persons: [\r\n                { name: newName, age: 28 },\r\n                { name: 'Manu', age: 29 },\r\n                { name: 'Stephanie', age: 27 }\r\n            ]\r\n        } )\r\n    }\r\n\r\n    nameChangedHandler = (event) => {\r\n        this.setState( {\r\n            persons: [\r\n                { name: 'Max', age: 28 },\r\n                { name: event.target.value, age: 29 },\r\n                { name: 'Stephanie', age: 26 }\r\n            ]\r\n        } )\r\n    }\r\n\r\n\r\n\r\n\r\n    render () {\r\n\r\n        const style = {\r\n            backgroundColor: 'white',\r\n            font: 'inherit',\r\n            border: '1px solid blue',\r\n            padding: '8px',\r\n            cursor: 'pointer'\r\n        };\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Hi, I'm a React App</h1>\r\n                <p>This is really working!</p>\r\n                <button\r\n                    style={style}\r\n                    onClick={() => this.switchNameHandler('Maximilian!!')}>Switch Name</button>\r\n                <Person\r\n                    name={this.state.persons[0].name}\r\n                    age={this.state.persons[0].age} />\r\n                <Person\r\n                    name={this.state.persons[1].name}\r\n                    age={this.state.persons[1].age}\r\n                    click={this.switchNameHandler.bind(this, 'Max!')}\r\n                    changed={this.nameChangedHandler} >My Hobbies: Racing</Person>\r\n                <Person\r\n                    name={this.state.persons[2].name}\r\n                    age={this.state.persons[2].age} />\r\n            </div>\r\n        );\r\n        // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}